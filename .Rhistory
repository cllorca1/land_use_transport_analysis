years = 2011:2050
initialYears = c(2025, 2030, 2035, 2040, 2045, 2050)
scenarios = c("A", "B", "C", "D", "E", "0")
time_to_equal_price = 15
df = data.frame()
for (i in 1:length(scenarios)){
initialYear = initialYears[i]
equalPriceYear = initialYear + 15
scenario = scenarios[i]
for (year in years){
if (year < initialYear){
ratio = 10 #/high ratio to avoid the probability of switching to autonomous before 2020
} else {
ratio = max(c(10 + (year - initialYear)/(equalPriceYear - initialYear)*(1-10) , 1))
}
row = list(year = year, scenario = scenario, ratio = ratio)
df = df %>% bind_rows(row)
}
}
df$scenario = factor(df$scenario, levels = scenarios)
scenario_colors = c("#FF0000", "#DE5959", "#D98282", "#C99797", "#C7B3B3","#000000")
ggplot(df, aes(x= year, y = ratio, color = scenario)) + geom_line(size = 2) + ylim(0,10) +
ylab("Ratio between AV and CV purchase costs") + xlab("Year") + theme_bw() + labs(color = "Scenario") + scale_color_manual(values = scenario_colors)
ggsave("C:/projects/Papers/2020_cities/figs/av_scenarios", width = 15, units = "cm", height = 10, scale = 1.5)
ggsave("C:/projects/Papers/2020_cities/figs/av_scenarios.pdf, width = 15, units = "cm", height = 10, scale = 1.5)
ggsave("C:/projects/Papers/2020_cities/figs/av_scenarios.pdf", width = 15, units = "cm", height = 10, scale = 1.5)
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr)
upper_folder = "c:/models/silo/muc/scenOutput/"
years = c(2011, 2020, 2030, 2040, 2050)
commuteDistance = data.frame()
satisfaction = data.frame()
scenarios = c("A", "B", "C", "D", "E", "0")
for (scenario in scenarios){
scenario_name = paste("AV", scenario, sep = "")
this_commuteDistance = read_csv(paste(upper_folder, scenario_name, "/siloResults/commutingDistance.csv", sep = ""))
this_satisfaction = read_csv(paste(upper_folder, scenario_name, "/siloResults/hhSatisfactionByRegion.csv", sep = ""))
thisHhs = this_satisfaction %>% group_by(year, region) %>% summarize(hh = sum(hh_count))
this_commuteDistance = this_commuteDistance %>% left_join(thisHhs, by=c("year", "region"))
this_commuteDistance$scenario = scenario
this_satisfaction$scenario = scenario
commuteDistance = commuteDistance %>% bind_rows(this_commuteDistance)
satisfaction = satisfaction %>% bind_rows(this_satisfaction)
}
zoneTypes = read_csv("c:/models/silo/muc/input/zoneSystem.csv")
zoneTypes = zoneTypes %>% select(id = Zone, area = Area, type = BBSR_Type)
satisfaction = satisfaction %>% lleft_join(zzoneTypes, by = c("zone" = "id"))
satisfaction = satisfaction %>% left_join(zzoneTypes, by = c("zone" = "id"))
satisfaction = satisfaction %>% left_join(zoneTypes, by = c("zone" = "id"))
satisfaction$type = factor(x = satisfaction$type, levels = c(10,20,30,40), labels = c("Core", "Medium city", "Town", "Rural"))
satisfaction_by_type = satisfaction %>% group_by(scenario, year, type) %>% summarise(satisfaction = weighted.mean(hh_ave_satisfaction, hh_count))
View(satisfaction_by_type)
ggplot(satisfaction_by_type, aes(x=year, y = satisfaction, color = scenario)) + geom_line(size = 1) + facet_wrap(.~type)
satisfaction_by_type$scenario = factor(satisfaction_by_type$scenario, levels = scenarios)
ggplot(satisfaction_by_type, aes(x=year, y = satisfaction, color = scenario)) +
geom_line(size = 1) + facet_wrap(.~type) + scale_color_manual(values = scenario_colors)
ggplot(satisfaction_by_type, aes(x=year, y = satisfaction, color = type)) +
geom_line(size = 1) + facet_wrap(.~scenario)
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr, rhdf5, sf, tmap)
upper_folder = "c:/models/silo/muc/scenOutput/"
upper_folder = "c:/models/silo/muc/microData/"
hh = read_csv(paste(uupper_folder, "hh_2011.csv"))
upper_folder = "c:/models/silo/muc/microData/"
hh = read_csv(paste(uupper_folder, "hh_2011.csv"))
hh = read_csv(paste(upper_folder, "hh_2011.csv", sep = ""))
hh %>% group_by(zone) %>% sumamrize(autos = sum(autos))
hh %>% group_by(zone) %>% summarize(autos = sum(autos))
hh_by_zone = hh %>% group_by(zone) %>% summarize(autos = sum(autos), zero = n(if_else(autos==0)) )
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr, rhdf5, sf, tmap, expss)
hh_by_zone = hh %>% group_by(zone) %>% summarize(autos = sum(autos), zero = count_if(autos ==0)  )
hh_by_zone = hh %>% group_by(zone) %>% summarize(numberOfCars = sum(autos), zero = count_if(autos==0))
hh%zero = if_else(hh$autos == 0, 1,0)
hh$zero = if_else(hh$autos == 0, 1,0)
hh$zero = if_else(hh$autos == 0, 1,0)
hh$one = if_else(hh$autos == 1, 1,0)
hh$two = if_else(hh$autos == 2, 1,0)
hh$three = if_else(hh$autos == 3, 1,0)
hh_by_zone = hh %>% group_by(zone) %>% summarize(numberOfCars = sum(autos), zero = sum(zero), one = sum(one), two = sum(two), three = sum(three))
write.table(hh_by_zone, "clipboard-1000k", sep = "\t", row.names = F)
library(simPop)
pacma::p_load(simPop)
pacman::p_load(simPop)
# basic example
inp <- as.data.frame(matrix(0, nrow=8, ncol=6))
colnames(inp) <- c("hhid","hh1","hh2","p1","p2","p3")
inp$hhid <- 1:8
inp$hh1[1:3] <- 1
inp$hh2[4:8] <- 1
inp$p1 <- c(1,1,2,1,0,1,2,1)
inp$p2 <- c(1,0,1,0,2,1,1,1)
inp$p3 <- c(1,1,0,2,1,0,2,0)
con <- list(hh1=35, hh2=65, p1=91, p2=65, p3=104)
View(inp)
res <- ipu(inp=inp, hid="hhid", con=con, verbose=FALSE)
# more sophisticated
# load sample and population data
data(eusilcS)
data(eusilcP)
# variable generation and preparation
eusilcS$hsize <- factor(eusilcS$hsize)
# make sure, factor levels in sample and population match
eusilcP$region <- factor(eusilcP$region, levels = levels(eusilcS$db040))
eusilcP$gender <- factor(eusilcP$gender, levels = levels(eusilcS$rb090))
eusilcP$hsize  <- factor(eusilcP$hsize , levels = levels(eusilcS$hsize))
# generate input matrix
# we want to adjust to variable "db040" (region) as household variables and
# variable "rb090" (gender) as individual information
samp <- data.table(eusilcS)
pop <-  data.table(eusilcP)
setkeyv(samp, "db030")
hh <- samp[!duplicated(samp$db030),]
hhpop <- pop[!duplicated(pop$hid),]
# reg contains for each region the number of households
reg <- data.table(model.matrix(~db040 +0, data=hh))
# hsize contains for each household size the number of households
hsize <- data.table(model.matrix(~factor(hsize) +0, data=hh))
# aggregate persons-level characteristics per household
# gender contains for each household the number of males and females
gender <- data.table(model.matrix(~db030+rb090 +0, data=samp))
setkeyv(gender, "db030")
gender <- gender[, lapply(.SD, sum), by = key(gender)]
# bind together and use it as input
inp <- cbind(reg, hsize, gender)
# the totals we want to calibrate to
con <- c(
as.list(xtabs(rep(1, nrow(hhpop)) ~ hhpop$region)),
as.list(xtabs(rep(1, nrow(hhpop)) ~ hhpop$hsize)),
as.list(xtabs(rep(1, nrow(eusilcP)) ~ eusilcP$gender))
)
# we need to have the same names as in 'inp'
names(con) <- setdiff(names(inp), "db030")
# run ipu und check results
res <- ipu(inp=inp, hid="db030", con=con, verbose=TRUE)
is <- sapply(2:(ncol(res)-1), function(x) {
sum(res[,x]*res$weights)
})
data.frame(required=unlist(con), is=is)
View(inp)
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr)
upper_folder = "c:/models/silo/muc/scenOutput/"
years = c(2011, 2020, 2030, 2040, 2050)
summary = data.frame()
scenarios = c("0_t", "A", "B", "C", "D", "E")
for (scenario in scenarios){
scenario_name = paste("AV", scenario, sep = "")
for (year in years){
workers_micro_data = read_csv(paste(upper_folder, scenario_name, "/siloResults/avOwnershipByHh_", year, ".csv", sep  =""))
workers_micro_data$isAvHh = if_else(workers_micro_data$avs > 0, "AV", if_else(workers_micro_data$autos> 0, "CV-only", "no-car"))
# p = ggplot(workers_micro_data, aes(x= timeCar, group = isAvHh, color = as.factor(isAvHh), ..density..)) +
#   geom_freqpoly(size = 1) + ggtitle(year)
# print(p)
#
workers = nrow(workers_micro_data)
hh_with_workers = length(unique(workers_micro_data$household))
hh = workers_micro_data %>% select(household, isAvHh, timeCar)
hh = hh[!duplicated(hh$household),]
hh_with_avs = nrow(hh %>% filter(isAvHh == "AV"))
hh_with_cvs = nrow(hh %>% filter(isAvHh == "CV-only"))
time_hh_with_cvs = mean((hh %>% filter(isAvHh == "CV-only"))$timeCar)
time_hh_with_avs = mean((hh %>% filter(isAvHh == "AV"))$timeCar)
time_hh_without_cars = mean((hh %>% filter(isAvHh == "no-car"))$timeCar)
row = data.frame(year, scenario, workers, hh_with_workers, hh_with_avs,hh_with_cvs,time_hh_with_cvs,time_hh_with_avs,time_hh_without_cars)
summary = summary %>% bind_rows(row)
}
}
summary$hh_without_cars = summary$hh_with_workers - summary$hh_with_avs - summary$hh_with_cvs
summary2 = summary %>% gather(c(hh_with_avs, hh_with_cvs, hh_without_cars), key  ="variable", value = "value")
ggplot(summary2, aes(x= year, y = value, color = variable)) + geom_line(size =1) + geom_point(size = 2) + facet_wrap(.~scenario)
ggplot(summary2 %>% filter(variable != "hh_with_workers", variable != "workers"),
aes(x= year, y = value, fill = variable)) + geom_bar(stat = "identity", position = "fill") + facet_wrap(.~scenario)
summary2_only_av = summary2 %>% filter(variable == "hh_with_avs")
ggplot(summary2_only_av, aes(x= year, y = value/hh_with_workers * 100, color = scenario)) + geom_line(size =1) + geom_point(size = 2)
summary3 = summary %>% gather(c(time_hh_with_avs, time_hh_with_cvs, time_hh_without_cars), key  ="variable", value = "value")
ggplot(summary3, aes(x= year, y = value, color = variable)) + geom_line(size =1) + geom_point(size = 2) + facet_wrap(.~scenario)
color_hh_types = c("indianRed1", "indianRed4", "royalblue3")
ggplot(summary3 %>% filter(scenario == "0_t" | scenario == "A"), aes(x= year, y = value, color = variable)) +
geom_line(size =1) + geom_point(size = 2) + facet_wrap(.~scenario) + scale_color_manual(values = color_hh_types) +
ylab("average commute time")
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr)
upper_folder = "c:/models/silo/muc/scenOutput/"
years = c(2011, 2020, 2030, 2040, 2050)
summary = data.frame()
scenarios = c("0_t", "0", "A", "A_t", "C", "C_t")
for (scenario in scenarios){
scenario_name = paste("AV", scenario, sep = "")
for (year in years){
workers_micro_data = read_csv(paste(upper_folder, scenario_name, "/siloResults/avOwnershipByHh_", year, ".csv", sep  =""))
workers_micro_data$isAvHh = if_else(workers_micro_data$avs > 0, "AV", if_else(workers_micro_data$autos> 0, "CV-only", "no-car"))
# p = ggplot(workers_micro_data, aes(x= timeCar, group = isAvHh, color = as.factor(isAvHh), ..density..)) +
#   geom_freqpoly(size = 1) + ggtitle(year)
# print(p)
#
workers = nrow(workers_micro_data)
hh_with_workers = length(unique(workers_micro_data$household))
hh = workers_micro_data %>% select(household, isAvHh, timeCar)
hh = hh[!duplicated(hh$household),]
hh_with_avs = nrow(hh %>% filter(isAvHh == "AV"))
hh_with_cvs = nrow(hh %>% filter(isAvHh == "CV-only"))
time_hh_with_cvs = mean((hh %>% filter(isAvHh == "CV-only"))$timeCar)
time_hh_with_avs = mean((hh %>% filter(isAvHh == "AV"))$timeCar)
time_hh_without_cars = mean((hh %>% filter(isAvHh == "no-car"))$timeCar)
row = data.frame(year, scenario, workers, hh_with_workers, hh_with_avs,hh_with_cvs,time_hh_with_cvs,time_hh_with_avs,time_hh_without_cars)
summary = summary %>% bind_rows(row)
}
}
summary$hh_without_cars = summary$hh_with_workers - summary$hh_with_avs - summary$hh_with_cvs
summary2 = summary %>% gather(c(hh_with_avs, hh_with_cvs, hh_without_cars), key  ="variable", value = "value")
ggplot(summary2, aes(x= year, y = value, color = variable)) + geom_line(size =1) + geom_point(size = 2) + facet_wrap(.~scenario)
ggplot(summary2 %>% filter(variable != "hh_with_workers", variable != "workers"),
aes(x= year, y = value, fill = variable)) + geom_bar(stat = "identity", position = "fill") + facet_wrap(.~scenario)
summary2_only_av = summary2 %>% filter(variable == "hh_with_avs")
ggplot(summary2_only_av, aes(x= year, y = value/hh_with_workers * 100, color = scenario)) + geom_line(size =1) + geom_point(size = 2)
summary3 = summary %>% gather(c(time_hh_with_avs, time_hh_with_cvs, time_hh_without_cars), key  ="variable", value = "value")
ggplot(summary3, aes(x= year, y = value, color = variable)) + geom_line(size =1) + geom_point(size = 2) + facet_wrap(.~scenario)
color_hh_types = c("indianRed1", "indianRed4", "royalblue3")
ggplot(summary3 %>% filter(scenario == "0_t" | scenario == "A"), aes(x= year, y = value, color = variable)) +
geom_line(size =1) + geom_point(size = 2) + facet_wrap(.~scenario) + scale_color_manual(values = color_hh_types) +
ylab("average commute time")
ggplot(summary3, aes(x= year, y = value, color = variable)) +
geom_line(size =1) + geom_point(size = 2) + facet_wrap(.~scenario) + scale_color_manual(values = color_hh_types) +
ylab("average commute time")
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr, rhdf5, sf, tmap)
upper_folder = "c:/models/silo/muc/scenOutput/"
years = c(2011, 2020, 2030, 2040, 2050)
scenarios = c("A", "B", "C", "D", "E", "0")
modeChoice = data.frame()
for (scenario in scenarios){
scenario_name = paste("AV", scenario, sep = "")
for (year in years){
this_year_data = read_csv(paste(upper_folder, scenario_name, "/siloResults/avOwnershipByHh_", year, ".csv", sep  = ""))
this_year_data$year = year
this_year_data$scenario = scenario
modeChoice = modeChoice %>% bind_rows(this_year_data)
rm(this_year_data)
}
}
modeChoice$hh_type = if_else(modeChoice$autos == 0, "zero-autos", if_else(modeChoice$avs == 0 ,  "hh-with-cvs", "hh-with-avs"))
zoneTypes = read_csv("c:/models/silo/muc/input/zoneSystem.csv")
zoneTypes = zoneTypes %>% select(id = Zone, area = Area, type = BBSR_Type)
modeChoice = modeChoice %>% left_join(zoneTypes, by = c("homeZone" = "id"))
modeChoice = modeChoice %>% left_join(zoneTypes, by = c("jobZone" = "id"), suffix = c("home", "job"))
summary_hhs = modeChoice %>% group_by(year, typehome, typejob, scenario) %>% summarise(workers = n())
summary_hhs$typehome = factor(x = summary_hhs$typehome, levels = c(10,20,30,40), labels = c("from Core", "from Medium city", "from Town", "from Rural"))
summary_hhs$typejob = factor(x = summary_hhs$typejob, levels = c(10,20,30,40), labels = c("to Core", "to Medium city", "to Town", "to Rural"))
summary_hhs$scenario = factor(summary_hhs$scenario, levels = scenarios)
scenario_colors = c("#FF0000", "#DE5959", "#D98282", "#C99797", "#C7B3B3","#000000")
ggplot(summary_hhs, aes(x=year, y=workers*20/1000, color = scenario)) +
geom_line(size  =1) +
facet_grid(typejob~typehome, scales = "free") +
scale_color_manual(values = scenario_colors) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Year") + ylab("Number of workers (thousands)") + labs(color = "Scenario")
scenarios = c("A", "A_t", "C", "C_t", "0", "0_t")
modeChoice = data.frame()
for (scenario in scenarios){
scenario_name = paste("AV", scenario, sep = "")
for (year in years){
this_year_data = read_csv(paste(upper_folder, scenario_name, "/siloResults/avOwnershipByHh_", year, ".csv", sep  = ""))
this_year_data$year = year
this_year_data$scenario = scenario
modeChoice = modeChoice %>% bind_rows(this_year_data)
rm(this_year_data)
}
}
modeChoice$hh_type = if_else(modeChoice$autos == 0, "zero-autos", if_else(modeChoice$avs == 0 ,  "hh-with-cvs", "hh-with-avs"))
zoneTypes = read_csv("c:/models/silo/muc/input/zoneSystem.csv")
zoneTypes = zoneTypes %>% select(id = Zone, area = Area, type = BBSR_Type)
modeChoice = modeChoice %>% left_join(zoneTypes, by = c("homeZone" = "id"))
modeChoice = modeChoice %>% left_join(zoneTypes, by = c("jobZone" = "id"), suffix = c("home", "job"))
summary_hhs = modeChoice %>% group_by(year, typehome, typejob, scenario) %>% summarise(workers = n())
summary_hhs$typehome = factor(x = summary_hhs$typehome, levels = c(10,20,30,40), labels = c("from Core", "from Medium city", "from Town", "from Rural"))
summary_hhs$typejob = factor(x = summary_hhs$typejob, levels = c(10,20,30,40), labels = c("to Core", "to Medium city", "to Town", "to Rural"))
summary_hhs$scenario = factor(summary_hhs$scenario, levels = scenarios)
scenario_colors = c("#FF0000", "#DE5959", "#D98282", "#C99797", "#C7B3B3","#000000")
ggplot(summary_hhs, aes(x=year, y=workers*20/1000, color = scenario)) +
geom_line(size  =1) +
facet_grid(typejob~typehome, scales = "free") +
scale_color_manual(values = scenario_colors) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Year") + ylab("Number of workers (thousands)") + labs(color = "Scenario")
scenarios = c("A", "A_no_parking", "C", "C_no_parking", "0", "0_no_parking")
modeChoice = data.frame()
for (scenario in scenarios){
scenario_name = paste("AV", scenario, sep = "")
for (year in years){
this_year_data = read_csv(paste(upper_folder, scenario_name, "/siloResults/avOwnershipByHh_", year, ".csv", sep  = ""))
this_year_data$year = year
this_year_data$scenario = scenario
modeChoice = modeChoice %>% bind_rows(this_year_data)
rm(this_year_data)
}
}
modeChoice$hh_type = if_else(modeChoice$autos == 0, "zero-autos", if_else(modeChoice$avs == 0 ,  "hh-with-cvs", "hh-with-avs"))
zoneTypes = read_csv("c:/models/silo/muc/input/zoneSystem.csv")
zoneTypes = zoneTypes %>% select(id = Zone, area = Area, type = BBSR_Type)
modeChoice = modeChoice %>% left_join(zoneTypes, by = c("homeZone" = "id"))
modeChoice = modeChoice %>% left_join(zoneTypes, by = c("jobZone" = "id"), suffix = c("home", "job"))
summary_hhs = modeChoice %>% group_by(year, typehome, typejob, scenario) %>% summarise(workers = n())
summary_hhs$typehome = factor(x = summary_hhs$typehome, levels = c(10,20,30,40), labels = c("from Core", "from Medium city", "from Town", "from Rural"))
summary_hhs$typejob = factor(x = summary_hhs$typejob, levels = c(10,20,30,40), labels = c("to Core", "to Medium city", "to Town", "to Rural"))
summary_hhs$scenario = factor(summary_hhs$scenario, levels = scenarios)
scenario_colors = c("#FF0000", "#DE5959", "#D98282", "#C99797", "#C7B3B3","#000000")
ggplot(summary_hhs, aes(x=year, y=workers*20/1000, color = scenario)) +
geom_line(size  =1) +
facet_grid(typejob~typehome, scales = "free") +
scale_color_manual(values = scenario_colors) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Year") + ylab("Number of workers (thousands)") + labs(color = "Scenario")
ggplotly()
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr, rhdf5, sf, tmap, plottly)
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr, rhdf5, sf, tmap, plotly)
ggplotly()
summary_hhs_by_home = modeChoice %>% group_by(year, typehome, scenario) %>% summarise(workers = n())
summary_hhs_by_home$typehome = factor(x = summary_hhs_by_home$typehome, levels = c(10,20,30,40), labels = c("from Core", "from Medium city", "from Town", "from Rural"))
summary_hhs_by_home$scenario = factor(summary_hhs_by_home$scenario, levels = scenarios)
ggplot(summary_hhs_by_home, aes(x=year, y=workers*20/1000, color = scenario)) +
geom_line(size  =1) +
facet_grid(.~typehome, scales = "free") +
scale_color_manual(values = scenario_colors) +
theme_bw() + theme(axis.text.x = element_text(angle = 90)) +
xlab("Year") + ylab("Number of workers (thousands)") + labs(color = "Scenario")
ggplotly()
ggplot(summary_hhs, aes(x=year, y=workers*20/1000, color = scenario)) +
geom_line(size  =1) +
facet_grid(typejob~typehome, scales = "free") +
scale_color_manual(values = scenario_colors) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Year") + ylab("Number of workers (thousands)") + labs(color = "Scenario")
ggplotly()
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr)
upper_folder = "c:/models/silo/muc/scenOutput/"
years = c(2011, 2020, 2030, 2040, 2050)
commuteDistance = data.frame()
satisfaction = data.frame()
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr)
upper_folder = "c:/models/silo/muc/scenOutput/"
years = c(2011, 2020, 2030, 2040, 2050)
commuteDistance = data.frame()
satisfaction = data.frame()
scenarios = c("A_no_parking", "B_no_parking", "C_no_parking", "D_no_parking", "E_no_parking", "0_no_parking")
for (scenario in scenarios){
scenario_name = paste("AV", scenario, sep = "")
this_commuteDistance = read_csv(paste(upper_folder, scenario_name, "/siloResults/commutingDistance.csv", sep = ""))
this_satisfaction = read_csv(paste(upper_folder, scenario_name, "/siloResults/hhSatisfactionByRegion.csv", sep = ""))
thisHhs = this_satisfaction %>% group_by(year, region) %>% summarize(hh = sum(hh_count))
this_commuteDistance = this_commuteDistance %>% left_join(thisHhs, by=c("year", "region"))
this_commuteDistance$scenario = scenario
this_satisfaction$scenario = scenario
commuteDistance = commuteDistance %>% bind_rows(this_commuteDistance)
satisfaction = satisfaction %>% bind_rows(this_satisfaction)
}
commuteDistance = commuteDistance %>% group_by(scenario, year) %>% summarize(time = weighted.mean(time, hh, na.rm = T))
commuteDistance$scenario = factor(commuteDistance$scenario, levels = scenarios)
scenario_colors = c("#FF0000", "#DE5959", "#D98282", "#C99797", "#C7B3B3","#000000")
ggplot(commuteDistance, aes(x=year, y= time, color = scenario)) +
geom_line(size = 1) + ylim(0,40) + scale_color_manual(values= scenario_colors) + theme_bw() +
xlab("Year") + ylab("Average commute time (measured as time by car) (min)") + labs(color = "Scenario")
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr, rhdf5, sf, tmap)
upper_folder = "c:/models/silo/muc/scenOutput/"
years = c(2011, 2020, 2030, 2040, 2050)
scenarios = c("0_no_parking", "E_no_parking", "D_no_parking", "C_no_parking", "B_no_parking", "A_no_parking")
modeChoice = data.frame()
for (scenario in scenarios){
scenario_name = paste("AV", scenario, sep = "")
this_modeChoice = read_csv(paste(upper_folder, scenario_name, "/siloResults/modeChoiceMicroData.csv", sep  = ""))
this_modeChoice$scenario = scenario
modeChoice = modeChoice %>% bind_rows(this_modeChoice)
rm(this_modeChoice)
}
modeChoice$zeroAutoHh = if_else(modeChoice$autos == 0, "zero-autos", if_else(modeChoice$avs == 0 ,  "hh-with-cvs", "hh-with-avs"))
color_modes = c("indianRed1", "indianRed4", "royalblue3")
modeChoice$scenario = factor(modeChoice$scenario, levels = scenarios)
ggplot(modeChoice, aes(x=year, fill = mode, color = mode)) + geom_bar(stat = "count", position = "fill") +
scale_fill_manual(values= color_modes) + scale_color_manual(values= color_modes) + facet_wrap(.~scenario) +
xlab("Year") + ylab("Share") + labs(fill = "Mode", color = "Mode") +
theme_bw() + theme(axis.text.x = element_text(angle = 90))
#link the distance on the network to the data set
source("c:/code/omx/api/r/omx2.r")
path_to_matrix = "c:/models/silo/muc/skims/skimsAllIntrazonal.omx"
matrix = readMatrixOMX(path_to_matrix, "distanceByTime")
modeChoice = modeChoice %>% rowwise() %>% mutate(distance = matrix[homeZone, workZone])
vkt = modeChoice %>% group_by(scenario, year, mode) %>% summarize(n = n(), vkt = sum(distance), avg_distance = mean(distance))
ggplot(vkt %>% filter(mode != "pt"), aes(x = year, y= vkt * 20 *2 / 1e9, fill = mode, color = mode)) + geom_bar(stat = "identity") + facet_wrap(.~scenario) +
scale_fill_manual(values = color_modes) + scale_color_manual(values = color_modes) + xlab("Year") +
ylab("Distance traveled (10E9 km)") +
labs(fill = "Mode", color = "Mode") + theme_bw() + theme(axis.text.x = element_text(angle = 90))
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr)
upper_folder = "c:/models/silo/muc/scenOutput/"
years = c(2011, 2020, 2030, 2040, 2050)
commuteDistance = data.frame()
satisfaction = data.frame()
scenarios = c("A_no_parking", "B_no_parking", "C_no_parking", "D_no_parking", "E_no_parking", "0_no_parking")
for (scenario in scenarios){
scenario_name = paste("AV", scenario, sep = "")
this_commuteDistance = read_csv(paste(upper_folder, scenario_name, "/siloResults/commutingDistance.csv", sep = ""))
this_satisfaction = read_csv(paste(upper_folder, scenario_name, "/siloResults/hhSatisfactionByRegion.csv", sep = ""))
thisHhs = this_satisfaction %>% group_by(year, region) %>% summarize(hh = sum(hh_count))
this_commuteDistance = this_commuteDistance %>% left_join(thisHhs, by=c("year", "region"))
this_commuteDistance$scenario = scenario
this_satisfaction$scenario = scenario
commuteDistance = commuteDistance %>% bind_rows(this_commuteDistance)
satisfaction = satisfaction %>% bind_rows(this_satisfaction)
}
commuteDistance = commuteDistance %>% group_by(scenario, year) %>% summarize(time = weighted.mean(time, hh, na.rm = T))
commuteDistance$scenario = factor(commuteDistance$scenario, levels = scenarios)
scenario_colors = c("#FF0000", "#DE5959", "#D98282", "#C99797", "#C7B3B3","#000000")
ggplot(commuteDistance, aes(x=year, y= time, color = scenario)) +
geom_line(size = 1) + ylim(0,40) + scale_color_manual(values= scenario_colors) + theme_bw() +
xlab("Year") + ylab("Average commute time (measured as time by car) (min)") + labs(color = "Scenario")
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr, rhdf5, sf, tmap, plotly)
upper_folder = "c:/models/silo/muc/scenOutput/"
years = c(2011, 2020, 2030, 2040, 2050)
scenarios = c("0_no_parking", "E_no_parking", "D_no_parking", "C_no_parking", "B_no_parking", "A_no_parking")
modeChoice = data.frame()
for (scenario in scenarios){
scenario_name = paste("AV", scenario, sep = "")
for (year in years){
this_year_data = read_csv(paste(upper_folder, scenario_name, "/siloResults/avOwnershipByHh_", year, ".csv", sep  = ""))
this_year_data$year = year
this_year_data$scenario = scenario
modeChoice = modeChoice %>% bind_rows(this_year_data)
rm(this_year_data)
}
}
modeChoice$hh_type = if_else(modeChoice$autos == 0, "zero-autos", if_else(modeChoice$avs == 0 ,  "hh-with-cvs", "hh-with-avs"))
zoneTypes = read_csv("c:/models/silo/muc/input/zoneSystem.csv")
zoneTypes = zoneTypes %>% select(id = Zone, area = Area, type = BBSR_Type)
modeChoice = modeChoice %>% left_join(zoneTypes, by = c("homeZone" = "id"))
modeChoice = modeChoice %>% left_join(zoneTypes, by = c("jobZone" = "id"), suffix = c("home", "job"))
summary_hhs = modeChoice %>% group_by(year, typehome, typejob, scenario) %>% summarise(workers = n())
summary_hhs$typehome = factor(x = summary_hhs$typehome, levels = c(10,20,30,40), labels = c("from Core", "from Medium city", "from Town", "from Rural"))
summary_hhs$typejob = factor(x = summary_hhs$typejob, levels = c(10,20,30,40), labels = c("to Core", "to Medium city", "to Town", "to Rural"))
summary_hhs$scenario = factor(summary_hhs$scenario, levels = scenarios)
scenario_colors = c("#FF0000", "#DE5959", "#D98282", "#C99797", "#C7B3B3","#000000")
ggplot(summary_hhs, aes(x=year, y=workers*20/1000, color = scenario)) +
geom_line(size  =1) +
facet_grid(typejob~typehome, scales = "free") +
scale_color_manual(values = scenario_colors) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Year") + ylab("Number of workers (thousands)") + labs(color = "Scenario")
summary_hhs_by_home = modeChoice %>% group_by(year, typehome, scenario) %>% summarise(workers = n())
summary_hhs_by_home$typehome = factor(x = summary_hhs_by_home$typehome, levels = c(10,20,30,40), labels = c("from Core", "from Medium city", "from Town", "from Rural"))
summary_hhs_by_home$scenario = factor(summary_hhs_by_home$scenario, levels = scenarios)
ggplot(summary_hhs_by_home, aes(x=year, y=workers*20/1000, color = scenario)) +
geom_line(size  =1) +
facet_grid(.~typehome, scales = "free") +
scale_color_manual(values = scenario_colors) +
theme_bw() + theme(axis.text.x = element_text(angle = 90)) +
xlab("Year") + ylab("Number of workers (thousands)") + labs(color = "Scenario")
pacman::p_load(readr, dplyr, data.table, ggplot2, tidyr, rhdf5, sf, tmap, plotly)
upper_folder = "c:/models/silo/muc/scenOutput/"
years = c(2011, 2020, 2030, 2040, 2050)
scenarios = c("0_no_parking", "E_no_parking", "D_no_parking", "C_no_parking", "B_no_parking", "A_no_parking")
modeChoice = data.frame()
for (scenario in scenarios){
scenario_name = paste("AV", scenario, sep = "")
for (year in years){
this_year_data = read_csv(paste(upper_folder, scenario_name, "/siloResults/avOwnershipByHh_", year, ".csv", sep  = ""))
this_year_data$year = year
this_year_data$scenario = scenario
modeChoice = modeChoice %>% bind_rows(this_year_data)
rm(this_year_data)
}
}
modeChoice$hh_type = if_else(modeChoice$autos == 0, "zero-autos", if_else(modeChoice$avs == 0 ,  "hh-with-cvs", "hh-with-avs"))
zoneTypes = read_csv("c:/models/silo/muc/input/zoneSystem.csv")
zoneTypes = zoneTypes %>% select(id = Zone, area = Area, type = BBSR_Type)
modeChoice = modeChoice %>% left_join(zoneTypes, by = c("homeZone" = "id"))
modeChoice = modeChoice %>% left_join(zoneTypes, by = c("jobZone" = "id"), suffix = c("home", "job"))
summary_hhs = modeChoice %>% group_by(year, typehome, typejob, scenario) %>% summarise(workers = n())
summary_hhs$typehome = factor(x = summary_hhs$typehome, levels = c(10,20,30,40), labels = c("from Core", "from Medium city", "from Town", "from Rural"))
summary_hhs$typejob = factor(x = summary_hhs$typejob, levels = c(10,20,30,40), labels = c("to Core", "to Medium city", "to Town", "to Rural"))
summary_hhs$scenario = factor(summary_hhs$scenario, levels = scenarios)
scenario_colors = c("#000000", "#FF0000", "#DE5959", "#D98282", "#C99797", "#C7B3B3")
ggplot(summary_hhs, aes(x=year, y=workers*20/1000, color = scenario)) +
geom_line(size  =1) +
facet_grid(typejob~typehome, scales = "free") +
scale_color_manual(values = scenario_colors) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Year") + ylab("Number of workers (thousands)") + labs(color = "Scenario")
scenario_colors = c("#000000", "#C7B3B3","#FF0000","#DE5959","#D98282","#C99797")
ggplot(summary_hhs, aes(x=year, y=workers*20/1000, color = scenario)) +
geom_line(size  =1) +
facet_grid(typejob~typehome, scales = "free") +
scale_color_manual(values = scenario_colors) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Year") + ylab("Number of workers (thousands)") + labs(color = "Scenario")
scenario_colors = c("#000000","#DE5959","#D98282","#C99797", "#C7B3B3","#FF0000")
ggplot(summary_hhs, aes(x=year, y=workers*20/1000, color = scenario)) +
geom_line(size  =1) +
facet_grid(typejob~typehome, scales = "free") +
scale_color_manual(values = scenario_colors) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Year") + ylab("Number of workers (thousands)") + labs(color = "Scenario")
ggplotly()
summary_hhs_by_home = modeChoice %>% group_by(year, typehome, scenario) %>% summarise(workers = n())
summary_hhs_by_home$typehome = factor(x = summary_hhs_by_home$typehome, levels = c(10,20,30,40), labels = c("from Core", "from Medium city", "from Town", "from Rural"))
summary_hhs_by_home$scenario = factor(summary_hhs_by_home$scenario, levels = scenarios)
ggplot(summary_hhs_by_home, aes(x=year, y=workers*20/1000, color = scenario)) +
geom_line(size  =1) +
facet_grid(.~typehome, scales = "free") +
scale_color_manual(values = scenario_colors) +
theme_bw() + theme(axis.text.x = element_text(angle = 90)) +
xlab("Year") + ylab("Number of workers (thousands)") + labs(color = "Scenario")
ggplotly()
