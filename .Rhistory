hh = sum(households),
acc = weighted.mean(autoAccessibility, population),
acc_transit = weighted.mean(transitAccessibility, population))
summary_by_zone_type_relative = spatial %>% group_by(scenario,year,classifier) %>%
summarize(pp = sum(population - population_base),
jj = sum(jobs - jobs_base),
price = weighted.mean(avePrice - avePrice_base,dd),
dd=sum(dd - dd_base),
hh = sum(households - households_base),
acc = weighted.mean(autoAccessibility - autoAccessibility_base, population),
acc_transit = weighted.mean(transitAccessibility - transitAccessibility_base, population))
dataset = summary_by_zone_type_relative
p = ggplot(dataset , aes(x=year, y = pp, color = as.factor(scenario))) +
geom_path(size = 1) +
facet_grid(.~classifier) +
ggtitle("Population") + theme(axis.text.x = element_text(angle = 90))
ggplotly(p, width = 1200)
p = ggplot(dataset, aes(x=year, y = hh, color = as.factor(scenario))) +
geom_path(size = 1) +
facet_grid(.~classifier)  +
ggtitle("Households")+ theme(axis.text.x = element_text(angle = 90))
ggplotly(p, width = 1200)
p = ggplot(dataset, aes(x=year, y = dd, color = as.factor(scenario))) +
geom_path(size = 1) +
facet_grid(.~classifier) +
ggtitle("Number of dwellings")+ theme(axis.text.x = element_text(angle = 90))
ggplotly(p, width = 1200)
p = ggplot(dataset, aes(x=year, y = dd-hh, color = as.factor(scenario))) +
geom_path(size = 1) +
facet_grid(.~classifier, scales = "free") +
ggtitle("Number of vacant dwellings")+ theme(axis.text.x = element_text(angle = 90))
ggplot(dataset, aes(x=year, y = pp/hh, color = as.factor(scenario))) +
geom_path(size = 1) +
facet_grid(.~classifier)  +
ggtitle("Households")+ theme(axis.text.x = element_text(angle = 90))
View(summary_by_core)
library(here)
source(paste(here(), "/silo/data_reader_v2_muc.R", sep  =""))
pacman::p_load(readr, dplyr, ggplot2, reshape, plotly, sf, leaflet, tmap, tidyr, here)
##upper folder of results - one level up of scenarios
folder = "d:/simulations/silo/fabilutSiloResultsSpring2020/"
##upper folder of inputs (zone system and zone shapefile)
folder_input = "c:/code/msm-visualizer/"
shapefile_name = paste(folder_input,"/map/muc/zones_31468.shp", sep ="")
zones_regions = read_csv(paste(folder_input,"/examples/muc/zoneSystem.csv", sep =""))
source(paste(here(), "/silo/data_reader_v2_muc.R", sep  =""))
##name of the base scenario
name_of_the_base_scenario = "baseCase"
##choose the way you want to clasifiy the results spatially (core-not core, muc-not muc, area type, core city name, etc.)
spatial$classifier = spatial$core
spatial_base = spatial %>% filter(scenario == name_of_the_base_scenario)
spatial = spatial %>% left_join(spatial_base, by = c("year", "zone", "region", "lkr", "areaType", "municipality", "is_core", "is_muc", "core"),
suffix = c("","_base"))
rm(spatial_base)
all_zones_summary = spatial %>% group_by(scenario,year) %>%
summarize(pp = sum(population),
jj = sum(jobs),
price = weighted.mean(avePrice,dd),
dd=sum(dd),
hh = sum(households),
acc = weighted.mean(autoAccessibility, population),
acc_transit = weighted.mean(transitAccessibility, population))
all_zones_summary_relative = spatial %>% group_by(scenario,year) %>%
summarize(pp = sum(population - population_base),
jj = sum(jobs - jobs_base),
price = weighted.mean(avePrice - avePrice_base,dd),
dd=sum(dd - dd_base),
hh = sum(households - households_base),
acc = weighted.mean(autoAccessibility - autoAccessibility_base, population),
acc_transit = weighted.mean(transitAccessibility -  transitAccessibility_base, population))
all_dataset = all_zones_summary_relative
p = ggplot(all_dataset, aes(x=year, y = pp, color = as.factor(scenario))) +
geom_path(size = 1) + geom_point(size = 2) +
ggtitle("Population") +
xlab("Year") + ylab("Population") +
theme_bw() + theme(axis.text.x = element_text(angle = 90)) +
scale_x_continuous(expand = c(0,0)) +  scale_y_continuous(expand = c(0,0))
ggplotly(p, width = 1200)
p = ggplot(all_dataset , aes(x=year, y = dd, color = as.factor(scenario))) +
geom_path(size = 1) +
ggtitle("Dwellings") +  theme_bw() + theme(axis.text.x = element_text(angle = 90))
ggplotly(p, width = 1200)
pacman::p_load(readr, dplyr, ggplot2, reshape, plotly, sf, leaflet, tmap, tidyr, here)
##upper folder of results - one level up of scenarios
folder = "d:/simulations/silo/fabilutSiloResultsSpring2020/"
##upper folder of inputs (zone system and zone shapefile)
folder_input = "c:/code/msm-visualizer/"
shapefile_name = paste(folder_input,"/map/muc/zones_31468.shp", sep ="")
zones_regions = read_csv(paste(folder_input,"/examples/muc/zoneSystem.csv", sep =""))
source(paste(here(), "/silo/data_reader_v2_muc.R", sep  =""))
##name of the base scenario
name_of_the_base_scenario = "baseCase"
spatial_base = spatial %>% filter(scenario == name_of_the_base_scenario, year == 2050)
map  = tm_basemap(leaflet::providers$CartoDB)
map_muni  = tm_basemap(leaflet::providers$CartoDB)
for (selected_scenario in scenarios){
if (selected_scenario != name_of_the_base_scenario){
this_scenario_spatial = spatial %>% filter(scenario == selected_scenario, year == 2050)
this_scenario_spatial = this_scenario_spatial %>% left_join(spatial_base, by = c("year", "zone", "region", "lkr", "areaType", "municipality", "is_core", "is_muc", "core"),
suffix = c("","_base"))
this_scenario_spatial =  this_scenario_spatial %>%
select(zone,transitAccessibility, transitAccessibility_base, region) %>%
mutate(difference = transitAccessibility - transitAccessibility_base)
this_shp = shp %>% left_join(this_scenario_spatial, by = c("shp_id"= "zone", "region"))
this_shp_muni = this_shp %>% group_by(municipality) %>%
summarize(transitAccessibility = sum(transitAccessibility), transitAccessibility_base = sum (transitAccessibility_base)) %>%
mutate(difference = transitAccessibility - transitAccessibility_base)
map =  map + tm_shape(this_shp, name = selected_scenario) +
tm_fill(col ="difference", sep = "", palette="-RdBu")
map_muni =  map_muni + tm_shape(this_shp_muni, name = selected_scenario) +
tm_fill(col ="difference", sep = "", palette="-RdBu")
}
}
tmap_leaflet(map_muni)
folder = "C:/models/silo/capetown/cape_town_fabilut/silo/"
pacman::p_load(dplyr, readr, tidyr, ggplot2)
folder = "C:/models/silo/capetown/cape_town_fabilut/silo/"
jobStartDistribution = read_csv(folder, "input/jobStartDistribution.csv" )
pacman::p_load(dplyr, readr, tidyr, ggplot2)
folder = "C:/models/silo/capetown/cape_town_fabilut/silo/"
jobStartDistribution = read_csv(paste(folder, "input/jobStartDistribution.csv",sep  =""))
jobStartDistribution = read_csv(paste(folder, "input/jobStartTimeDistribution.csv",sep  =""))
jobStartDistribution = read_csv(paste(folder, "input/jobStartTimeDistributions.csv",sep  =""))
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time, y = Mnft))
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time, y = Mnft), solor = "red")
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time, y = Mnft), color = "red")
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time, y = Mnft), color = "red", size = 1)
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time, y = Mnft), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time, y = Adm), color = "red", size = 1)
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time, y = Mnft), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time, y = Admn), color = "red", size = 1)
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time, y = Mnft), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time, y = Admn), color = "blue", size = 1)
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn), color = "blue", size = 1, stat = "identity")
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn), color = "blue", size = 1, stat = "identity", position = "iudntity")
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn), color = "blue", size = 1, stat = "identity", position = "identity")
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft), color = "red", size = 1, stat = "identity", position = "identity") +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn), color = "blue", size = 1, stat = "identity", position = "identity")
View(jobStartDistribution)
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft/max(jobStartDistribution$Mnft)), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn), color = "blue", size = 1)
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft/max(jobStartDistribution$Mnft)), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn/max(jobStartDistribution$Admn)), color = "blue", size = 1)
jobStartDistribution = read_csv(paste(folder, "input/jobDurationDistributions.csv",sep  =""))
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn), color = "blue", size = 1)
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft/max(jobStartDistribution$Mnft)), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn/max(jobStartDistribution$Admn)), color = "blue", size = 1)
ggplot(data  = jobDurationDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft/max(jobDurationDistribution$Mnft)), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn/max(jobDurationDistribution$Admn)), color = "blue", size = 1)
jobDurationDistribution = read_csv(paste(folder, "input/jobDurationDistributions.csv",sep  =""))
ggplot(data  = jobDurationDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft/max(jobDurationDistribution$Mnft)), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn/max(jobDurationDistribution$Admn)), color = "blue", size = 1)
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft/max(jobStartDistribution$Mnft)), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn/max(jobStartDistribution$Admn)), color = "blue", size = 1) +
ylab("Rel. frequency (red = manufacturing, blue = services")
jobDurationDistribution = read_csv(paste(folder, "input/jobDurationDistributions.csv",sep  =""))
ggplot(data  = jobDurationDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft/max(jobDurationDistribution$Mnft)), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn/max(jobDurationDistribution$Admn)), color = "blue", size = 1) +
ylab("Rel. frequency (red = manufacturing, blue = services)")
jobStartDistribution = read_csv(paste(folder, "input/jobStartTimeDistributions.csv",sep  =""))
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft/max(jobStartDistribution$Mnft)), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn/max(jobStartDistribution$Admn)), color = "blue", size = 1) +
ylab("Rel. frequency (red = manufacturing, blue = services)")
tripFrequencyDistribution = read_csv(paste(folder, "input/hts_work_tripLengthFrequencyDistribution.csv",sep  =""))
tripFrequencyDistribution$utility_exp = exp(-0.2 * tripFrequencyDistribution$TravelTime)
ggplot(data  = tripFrequencyDistribution) +
geom_line(inherit.aes = F, aes(x = TravelTime, y = utility), color = "black", size = 1) +
geom_line(inherit.aes = F, aes(x = TravelTime, y = utility_exp), color = "green", size = 1) +
ylab("Rel. frequency (red = manufacturing, blue = services)")
ggplot(data  = tripFrequencyDistribution) +
geom_line(inherit.aes = F, aes(x = TravelTime, y = utility), color = "black", size = 1) +
geom_line(inherit.aes = F, aes(x = TravelTime, y = exp(-0,2 * TravelTime)), color = "green", size = 1) +
ylab("Rel. frequency (red = manufacturing, blue = services)")
ggplot(data  = tripFrequencyDistribution) +
geom_line(inherit.aes = F, aes(x = TravelTime, y = utility), color = "black", size = 1) +
geom_line(inherit.aes = F, aes(x = TravelTime, y = exp(-0.2 * TravelTime)), color = "green", size = 1) +
ylab("Rel. frequency (red = manufacturing, blue = services)")
ggplot(data  = tripFrequencyDistribution) +
geom_line(inherit.aes = F, aes(x = TravelTime, y = utility), color = "black", size = 1) +
geom_line(inherit.aes = F, aes(x = TravelTime, y = exp(-0.2 * TravelTime)), color = "orange", size = 1) +
ylab("Rel. frequency (red = manufacturing, blue = services)")
zones = read_csv(paste(folder, "input/zoneSytem.csv",sep  =""))
zones = read_csv(paste(folder, "input/zoneSystem.csv",sep  =""))
development = read_csv(paste(folder, "input/development.csv", sep  =""))
View(development)
pacman::p_load(dplyr, readr, tidyr, ggplot2, sf, tmap)
shp = st_read(paste(folder, "input/zonesShapeFile/zones.shp",sep  =""))
map  = tm_basemap(leaflet::providers$CartoDB)
View(map)
View(shp)
View(shp)
shp = shp %>% left_join(development, by = c("ID_cell" = "Zone"))
map =  map + tm_shape(shp, name = "Zones") +
tm_fill(col ="DevLandUse")
map
map =  map + tm_shape(shp) +
tm_fill(col ="DevLandUse")
map  = tm_basemap(leaflet::providers$CartoDB)
map =  map + tm_shape(shp) +
tm_fill(col ="DevLandUse")
map
tmap_leaflet(map)
map  = tm_basemap(leaflet::providers$CartoDB)
map =  map + tm_shape(shp) +
tm_polygons(col ="DevLandUse")
tmap_leaflet(map)
ggplot(shp, aes(x = population, y = DevLandUse)) + goem_point()
ggplot(shp, aes(x = population, y = DevLandUse)) + geom_point()
ggplot(shp, aes(x = Population, y = DevLandUse)) + geom_point()
map =  map + tm_shape(shp) +
tm_polygons(col ="DevLandUse", style = "quantile")
tmap_leaflet(map)
ggplot(shp, aes(x = area_1, y = DevLandUse)) + geom_point()
ggplot(shp, aes(x = Area, y = DevLandUse)) + geom_point()
map  = tm_basemap(leaflet::providers$CartoDB)
map =  map + tm_shape(shp) +
tm_polygons(col ="area_1")
tmap_leaflet(map)
ggplot(shp, aes(x = area_1, y = DevLandUse)) + geom_point()
#The developable land is extracted from the field area_1. Unfortunately, this field seems to be a wrong computation of the area!!
shp$true_area = st_area()
#The developable land is extracted from the field area_1. Unfortunately, this field seems to be a wrong computation of the area!!
shp$true_area = st_area(shp)
View(shp)
ggplot(shp, aes(x = true_area, y = DevLandUse)) + geom_point()
ggplot(shp, aes(x = as.numeric(true_area), y = DevLandUse)) + geom_point()
pp = read_csv(paste(folder, "microData/pp_2011.csv", sep = ""))
pp %>% group_by(race) %>% summarize(n())
pp %>% group_by(race) %>% summarize(count = n(), ave_income = mean(income))
ggplot(pp, aes(x = income, color = race)) + geom_freqpoly()
ggplot(pp, aes(x = income, color = race)) + stat_ecdf()
ggplot(pp, aes(x = income, color = race)) + stat_ecdf() + scale_x_log10()
jj = read_csv(paste(folder, "microData/jj_2011.csv", sep = ""))
jj = jj %>% mutate(is_vacant = if_else(person==-1, "vacant", "taken"))
jj = jj %>% mutate(is_vacant = if_else(personId==-1, "vacant", "taken"))
hh = read_csv(paste(folder, "microData/hh_2011.csv", sep = ""))
dd = read_csv(paste(folder, "microData/dd_2011.csv", sep = ""))
pp = pp %>% left_join(hh, by = c(hhId = id))
pp = pp %>% left_join(hh, by = c("hhId" = "id"))
pp = pp %>% left_join(hh, by = c("hhid" = "id"))
pp = pp %>% left_join(dd, by = c("dwelling" = "id"))
pp_by_zone_and_race = pp %>% group_by(race,zone) %>% summarize(count = n()) %>% pivot_wider(names_from = "race", values_from = "count")
pp_by_zone_and_race = pp %>% group_by(race,zone) %>% summarize(count = n()) %>% pivot_wider(names_from = "race", values_from = "count", values_fill = 0)
shp = st_read(paste(folder, "input/zonesShapeFile/zones.shp",sep  =""))
shp = shp %>% left_join(pp_by_zone_and_race, by = c("ID_cell" = "zone"))
map  = tm_basemap(leaflet::providers$CartoDB)
map =  map + tm_shape(shp) +
tm_polygons(col ="DevLandUse")
map =  map + tm_shape(shp) +
tm_polygons(col ="BLACK")
tmap_leaflet(map)
map  = tm_basemap(leaflet::providers$CartoDB)
map =  map + tm_shape(shp) +
tm_polygons(col ="BLACK")
tmap_leaflet(map)
map =  map + tm_shape(shp) +
tm_polygons(col ="BLACK", style = "quantile", convert2density = T)
map  = tm_basemap(leaflet::providers$CartoDB)
map =  map + tm_shape(shp) +
tm_polygons(col ="BLACK", style = "quantile", convert2density = T)
tmap_leaflet(map)
map  = tm_basemap(leaflet::providers$CartoDB)
map =  map + tm_shape(shp) +
tm_polygons(col ="BLACK", style = "quantile", convert2density = T)
map =  map + tm_shape(shp) +
tm_polygons(col ="WHITE", style = "quantile", convert2density = T)
tmap_leaflet(map)
map  = tm_basemap(leaflet::providers$CartoDB)
map =  map + tm_shape(shp, "black") +
tm_polygons(col ="BLACK", style = "quantile", convert2density = T)
map =  map + tm_shape(shp, "white") +
tm_polygons(col ="WHITE", style = "quantile", convert2density = T)
tmap_leaflet(map)
jj %>% group_by(type, is_vacant) %>% summarise(n())
dd = dd %>% mutate(is_vacant = if_else(hhID==-1, "vacant", "taken"))
dd %>% group_by(type, is_vacant) %>% summarise(n())
View(dd)
dd %>% group_by(type, is_vacant) %>% summarise(n(), ave_cost = mean(monthlyCost))
dd %>% group_by(type, is_vacant) %>% summarise(n(), ave_cost = mean(monthlyCost), quality = mean(quality))
dd %>% group_by(type, is_vacant) %>% summarise(n(), ave_cost = mean(monthlyCost), quality = mean(quality), max_quality = max(quality))
dd %>% group_by(type, is_vacant) %>% summarise(n(), ave_cost = mean(monthlyCost), quality = mean(quality), max_quality = max(quality))
dd %>% group_by(type, is_vacant) %>% summarise(n(), ave_cost = mean(monthlyCost), ave_quality = mean(quality), max_quality = max(quality))
dd %>% group_by(type, is_vacant) %>% summarise(n(),
ave_cost = mean(monthlyCost),
min_quality = min(quality),
ave_quality = mean(quality),
max_quality = max(quality))
dd %>% group_by(type, is_vacant) %>% summarise(n(),
ave_cost = mean(monthlyCost),
ave_quality = mean(quality))
dd_by_zone = dd %>% group_by(type,zone) %>% summarize(count = n()) %>% pivot_wider(names_from = "type", values_from = "count", values_fill = 0)
shp = st_read(paste(folder, "input/zonesShapeFile/zones.shp",sep  =""))
shp = shp %>% left_join(dd_by_zone, by = c("ID_cell" = "zone"))
map  = tm_basemap(leaflet::providers$CartoDB)
map  = tm_basemap(leaflet::providers$CartoDB)
map =  map + tm_shape(shp, "formal") +
tm_polygons(col ="FORMAL", style = "quantile", convert2density = T)
map =  map + tm_shape(shp, "white") +
tm_polygons(col ="BACKYARD_INFORMAL", style = "quantile", convert2density = T)
tmap_leaflet(map)
map  = tm_basemap(leaflet::providers$CartoDB)
map =  map + tm_shape(shp, "multifamily") +
tm_polygons(col ="MULTIFAMILY", style = "quantile", convert2density = T)
map =  map + tm_shape(shp, "backyard_informal") +
tm_polygons(col ="BACKYARD_INFORMAL", style = "quantile", convert2density = T)
tmap_leaflet(map)
sessionInfo()
pandoc_version()
rmarkdown::pandoc_version()
install.packages("pandoc")
pacman::p_load(dplyr, readr, tidyr, ggplot2, sf, tmap)
folder = "C:/models/silo/capetown/cape_town_fabilut/silo/"
jobStartDistribution = read_csv(paste(folder, "input/jobStartTimeDistributions.csv",sep  =""))
ggplot(data  = jobStartDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft/max(jobStartDistribution$Mnft)), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn/max(jobStartDistribution$Admn)), color = "blue", size = 1) +
ylab("Rel. frequency (red = manufacturing, blue = services)")
jobDurationDistribution = read_csv(paste(folder, "input/jobDurationDistributions.csv",sep  =""))
ggplot(data  = jobDurationDistribution) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Mnft/max(jobDurationDistribution$Mnft)), color = "red", size = 1) +
geom_line(inherit.aes = F, aes(x = time/3600, y = Admn/max(jobDurationDistribution$Admn)), color = "blue", size = 1) +
ylab("Rel. frequency (red = manufacturing, blue = services)")
tripFrequencyDistribution = read_csv(paste(folder, "input/hts_work_tripLengthFrequencyDistribution.csv",sep  =""))
ggplot(data  = tripFrequencyDistribution) +
geom_line(inherit.aes = F, aes(x = TravelTime, y = utility), color = "black", size = 1) +
geom_line(inherit.aes = F, aes(x = TravelTime, y = exp(-0.2 * TravelTime)), color = "orange", size = 1) +
ylab("Rel. frequency (red = manufacturing, blue = services)")
zones = read_csv(paste(folder, "input/zoneSystem.csv",sep  =""))
development = read_csv(paste(folder, "input/development.csv", sep  =""))
shp = st_read(paste(folder, "input/zonesShapeFile/zones.shp",sep  =""))
shp = shp %>% left_join(development, by = c("ID_cell" = "Zone"))
ggplot(shp, aes(x = as.numeric(true_area), y = DevLandUse)) + geom_point()
ggplot(shp, aes(x = DevLandUse/0.15)) + geom_histogram()
sum(shp = DevLandUse/0.15)
sum(shp$DevLandUse/0.15)
sum(shp$DevLandUse)
pp = read_csv(paste(folder, "microData/pp_2011.csv", sep = ""))
hh = read_csv(paste(folder, "microData/hh_2011.csv", sep = ""))
dd = read_csv(paste(folder, "microData/dd_2011.csv", sep = ""))
jj = read_csv(paste(folder, "microData/jj_2011.csv", sep = ""))
pacman::p_load(readr, dplyr, ggplot2, reshape, plotly, sf, leaflet, tmap, tidyr, here)
pacman::p_load(readr, dplyr, ggplot2, reshape, plotly, sf, leaflet, tmap, tidyr, here)
##upper folder of results - one level up of scenarios
folder = "d:/simulations/silo/fabilutSiloResultsSpring2020/"
##upper folder of inputs (zone system and zone shapefile)
folder_input = "c:/code/msm-visualizer/"
shapefile_name = paste(folder_input,"/map/muc/zones_31468.shp", sep ="")
zones_regions = read_csv(paste(folder_input,"/examples/muc/zoneSystem.csv", sep =""))
source(paste(here(), "/silo/data_reader_v2_muc.R", sep  =""))
##name of the base scenario
name_of_the_base_scenario = "baseCase"
##choose the way you want to clasifiy the results spatially (core-not core, muc-not muc, area type, core city name, etc.)
spatial$classifier = spatial$core
spatial_base = spatial %>% filter(scenario == name_of_the_base_scenario)
spatial = spatial %>% left_join(spatial_base, by = c("year", "zone", "region", "lkr", "areaType", "municipality", "is_core", "is_muc", "core"),
suffix = c("","_base"))
rm(spatial_base)
all_zones_summary = spatial %>% group_by(scenario,year) %>%
summarize(pp = sum(population),
jj = sum(jobs),
price = weighted.mean(avePrice,dd),
dd=sum(dd),
hh = sum(households),
acc = weighted.mean(autoAccessibility, population),
acc_transit = weighted.mean(transitAccessibility, population))
all_zones_summary_relative = spatial %>% group_by(scenario,year) %>%
summarize(pp = sum(population - population_base),
jj = sum(jobs - jobs_base),
price = weighted.mean(avePrice - avePrice_base,dd),
dd=sum(dd - dd_base),
hh = sum(households - households_base),
acc = weighted.mean(autoAccessibility - autoAccessibility_base, population),
acc_transit = weighted.mean(transitAccessibility -  transitAccessibility_base, population))
all_dataset = all_zones_summary_relative
p = ggplot(all_dataset, aes(x=year, y = pp, color = as.factor(scenario))) +
geom_path(size = 1) + geom_point(size = 2) +
ggtitle("Population") +
xlab("Year") + ylab("Population") +
theme_bw() + theme(axis.text.x = element_text(angle = 90)) +
scale_x_continuous(expand = c(0,0)) +  scale_y_continuous(expand = c(0,0))
p
ggplotly(p, width = 1200)
summary_by_zone_type = spatial %>% group_by(scenario,year,classifier) %>%
summarize(pp = sum(population),
jj = sum(jobs),
price = weighted.mean(avePrice,dd),
dd= sum(dd),
hh = sum(households),
acc = weighted.mean(autoAccessibility, population),
acc_transit = weighted.mean(transitAccessibility, population))
summary_by_zone_type_relative = spatial %>% group_by(scenario,year,classifier) %>%
summarize(pp = sum(population - population_base),
jj = sum(jobs - jobs_base),
price = weighted.mean(avePrice - avePrice_base,dd),
dd=sum(dd - dd_base),
hh = sum(households - households_base),
acc = weighted.mean(autoAccessibility - autoAccessibility_base, population),
acc_transit = weighted.mean(transitAccessibility - transitAccessibility_base, population))
dataset = summary_by_zone_type_relative
p = ggplot(dataset , aes(x=year, y = pp, color = as.factor(scenario))) +
geom_path(size = 1) +
facet_grid(.~classifier) +
ggtitle("Population") + theme(axis.text.x = element_text(angle = 90))
ggplotly(p, width = 1200)
p
dataSet$scenario = factor(data$scenario, levels = c("baseCase", "baseCase_MagLev", "MucCoreCityDev_MagLev", "MucCoreCityDev", "MucDev"),
labels = c("baseCase", "baseCase_MdfgfdagLev", "dfgddf", "MucCoreCityDev", "MucDev"))
p = ggplot(dataset , aes(x=year, y = pp, color = as.factor(scenario))) +
geom_path(size = 1) +
facet_grid(.~classifier) +
ggtitle("Population") + theme(axis.text.x = element_text(angle = 90))
p = ggplot(dataset , aes(x=year, y = pp, color = scenario)) +
geom_path(size = 1) +
facet_grid(.~classifier) +
ggtitle("Population") + theme(axis.text.x = element_text(angle = 90))
p
dataSet$scenario = factor(data$scenario, levels = c("baseCase", "baseCase_MagLev", "MucCoreCityDev_MagLev", "MucCoreCityDev", "MucDev"),
labels = c("baseCase", "baseCase_MdfgfdagLev", "dfgddf", "MucCoreCityDev", "MucDev"))
dataSet$scenario = factor(dataset$scenario, levels = c("baseCase", "baseCase_MagLev", "MucCoreCityDev_MagLev", "MucCoreCityDev", "MucDev"),
labels = c("baseCase", "baseCase_MdfgfdagLev", "dfgddf", "MucCoreCityDev", "MucDev"))
p = ggplot(dataset , aes(x=year, y = pp, color = scenario)) +
geom_path(size = 1) +
facet_grid(.~classifier) +
ggtitle("Population") + theme(axis.text.x = element_text(angle = 90))
p
dataSet$scenario = factor(dataSet$scenario, levels = c("baseCase", "baseCase_MagLev", "MucCoreCityDev_MagLev", "MucCoreCityDev", "MucDev"),
labels = c("baseCase", "baseCase_MdfgfdagLev", "dfgddf", "MucCoreCityDev", "MucDev"))
dataset$scenario = factor(dataset$scenario, levels = c("baseCase", "baseCase_MagLev", "MucCoreCityDev_MagLev", "MucCoreCityDev", "MucDev"),
labels = c("baseCase", "baseCase_MdfgfdagLev", "dfgddf", "MucCoreCityDev", "MucDev"))
p = ggplot(dataset , aes(x=year, y = pp, color = scenario)) +
geom_path(size = 1) +
facet_grid(.~classifier) +
ggtitle("Population") + theme(axis.text.x = element_text(angle = 90))
p
pacman::p_load(readr, dplyr, ggplot2, reshape, plotly, sf, leaflet, tmap, tidyr, here)
pacman::p_load(dplyr, readr, ggplot2)
trips = read_csv("~/LRZ Sync+Share/bast_EntlastungBundesfernstraßen (Rolf Moeckel)/output_trips_file/trips_10percent.csv")
trips = read_csv("C:/users/carrloga/LRZ Sync+Share/bast_EntlastungBundesfernstraßen (Rolf Moeckel)/output_trips_file/trips_10percent.csv")
trips = read_csv("C:/users/carlloga/LRZ Sync+Share/bast_EntlastungBundesfernstraßen (Rolf Moeckel)/output_trips_file/trips_10percent.csv")
ggplot(trips, aes(x = distance, color = purpose)) + geom_freqpoly()
ggplot(trips, aes(x = distance, color = purpose)) + stat_ecdf()
View(trips)
summary(as.factor(trip$pourpose))
summary(as.factor(trips$pourpose))
summary(as.factor(trips$purpose))
View(trips)
trips %>% filter(purpose == "1.7894084000000001")
trips %>% filter(purpose == "6232")
here = trips %>% filter(purpose == "6232")
here$id
trips = read_csv("C:/users/carlloga/LRZ Sync+Share/bast_EntlastungBundesfernstraßen (Rolf Moeckel)/output_trips_file/trips_10percent.csv")
ggplot(trips, aes(x = distance, color = purpose)) + stat_ecdf()
trips = read_csv("C:/users/carlloga/LRZ Sync+Share/bast_EntlastungBundesfernstraßen (Rolf Moeckel)/output_trips_file/trips_10percent.csv")
ggplot(trips, aes(x = distance, color = purpose)) + stat_ecdf()
ggplot(trips, aes(x = distance, color = purpose)) + stat_ecdf() + xlim(0,1000)
ggplot(trips, aes(x = distance, color = purpose)) + stat_ecdf(size = 1) + xlim(0,1000) + theme_bw()
ggplot(trips, aes(x = distance, fill = tripMode)) + geom_area(stat = "count", position = "fill") + xlim(0,1000) + theme_bw()
ggplot(trips, aes(x = distance, fill = mode)) + geom_area(stat = "count", position = "fill") + xlim(0,1000) + theme_bw()
trips = trips %>% mutate(distance_bin = cut(distance, breaks  = 1:100 * 10))
trip_summary = trips %>% group_by(purpose, mode, distance_bin)
trip_summary = trips %>% group_by(purpose, mode, distance_bin) %>% summarize(n = n())
trips = trips %>% mutate(distance_bin = cut(distance, breaks  = -1:100 * 10))
trip_summary = trips %>% group_by(purpose, mode, distance_bin) %>% summarize(n = n())
ggplot(trip_summary, aes(x = distance_bin, y = n, fill = mode)) +
geom_area(stat = "identity", position = "fill") +
xlim(0,1000) +
theme_bw() +
facet_wrap(.~purpose)
ggplot(trip_summary, aes(x = distance_bin, y = n, fill = mode)) +
geom_area(stat = "identity", position = "fill") +
theme_bw() +
facet_wrap(.~purpose)
ggplot(trip_summary, aes(x = as.numeric(distance_bin) * 10, y = n, fill = mode)) +
geom_area(stat = "identity", position = "fill") +
theme_bw() +
facet_wrap(.~purpose)
ggplot(trip_summary, aes(x = as.numeric(distance_bin) * 10, y = n, fill = mode)) +
geom_area(stat = "identity", position = "fill") +
theme_bw() +
facet_wrap(.~purpose, scales = "free_x")
View(trip_summary)
trip_summary_2 = trips %>% group_by(purpose, mode) %>% summarize(n = n())
pacman::p_load(dplyr, readr, ggplot2, tydir)
pacman::p_load(dplyr, readr, ggplot2, tydr)
pacman::p_load(dplyr, readr, ggplot2, tidyr)
trip_summary_2 = trips %>% group_by(purpose, mode) %>% summarize(n = n()) %>% spread(purpose, n)
trip_summary_2
View(trips)
