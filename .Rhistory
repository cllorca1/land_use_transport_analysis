color = region,
group = region)) +
ylab("Population") +
geom_line(size = 1)
print(plot5)
plot5 = ggplot(data_region, aes(x=as.integer(year),
y = population,
color = region,
group = region)) +
ylab("Population") +
geom_line(size = 1) +
theme_light() +
theme(legend.position = "bottom") +
labs(color = "Region")
print(plot5)
plot5 = ggplot(data_region, aes(x=as.integer(year),
y = population,
color = region,
group = region)) +
ylab("Population") +
geom_line(size = 1) +
theme_light() +
theme(legend.position = "bottom") +
labs(color = "Region") +
ylab(year)
print(plot5)
source("spatial_reader.R")
output_path = "c:/projects/SILO/relocation/scenarios/"
scenario_name = "4e"
subpath =  scenario_name
source("results_reader.R")
source("analyze_sp.R")
source("spatial_reader.R")
read_results(output_path, subpath, scenario_name)
analyze_sp(output_path, subpath, scenario_name)
read_spatial(output_path, subpath, scenario_name)
output_path = "c:/projects/SILO/relocation/scenarios/"
scenario_name = "4e"
subpath =  scenario_name
source("results_reader.R")
source("analyze_sp.R")
source("spatial_reader.R")
read_results(output_path, subpath, scenario_name)
analyze_sp(output_path, subpath, scenario_name)
read_spatial(output_path, subpath, scenario_name)
path = "c:/models/silo/mucSmall/scenOutput"
file_name = "resultFileSpatial1.csv"
raw = read.csv(paste(path,subpath,file_name,sep = "/"),
fill = T,
skip = 1,as.is = 1:21)
raw = raw %>% filter(autoAccessibility != "", autoAccessibility != "autoAccessibility")
zones  = unique(as.numeric(raw$Year2011))
years = 2011:2050
firstColumns = data.frame()
for(year in years){
thisYear = data.frame(zone = zones, year = year)
firstColumns = rbind(firstColumns, thisYear)
}
raw = cbind(firstColumns, raw)
raw = raw %>% mutate (validation = if_else(zone == as.numeric(Year2011), T, F))
summary(raw$validation)
data = raw %>% select(year, zone, autoAccessibility,
transitAccessibility ,
population,
households,
jobs) %>%
mutate(autoAccessibility = as.numeric(autoAccessibility)) %>%
mutate(transitAccessibility = as.numeric(transitAccessibility)) %>%
mutate(population = as.numeric(population)) %>%
mutate(households = as.numeric(households)) %>%
mutate(jobs = as.numeric(jobs))
source("c:/code/matsimScaling/siloAnalysis/readZonesAndRegions.R")
data = merge(x= data, y = zonesWithRegionName, by = "zone")
data_region = data %>% group_by(year, region = work_region_name) %>% summarize(autoAccessibility = mean(autoAccessibility),
transitAccessibility = mean(transitAccessibility),
population = sum(population),
households = sum(households),
jobs = sum(jobs))
subsample_regions = c("Dachau", "München-Landeshauptstadt", "Augsburg", "Eichstätt")
data_region = data_region %>% filter(region %in% subsample_regions)
plot5 = ggplot(data_region, aes(x=as.integer(year),
y = population,
color = region,
group = region)) +
ylab("Population") +
geom_line(size = 1) +
theme_light() +
theme(legend.position = "bottom") +
labs(color = "Region") +
xlab("year")
print(plot5)
ggsave(file = paste(output_path,"pp_regional_",scenario_name,".png", sep = ""),
plot =  plot5, height = 15, width = 10, units = "cm" )
read_spatial(output_path, subpath, scenario_name)
source("spatial_reader.R")
output_path = "c:/projects/SILO/relocation/scenarios/"
scenario_name = "4e"
subpath =  scenario_name
read_spatial(output_path, subpath, scenario_name)
View(zonesWithRegionName)
regions$region_name
factor(region$region_name)
factor(regions$region_name)
as.factor(regions$region_name)
levels(regions$region_name)
subsample_regions = c(2,4,19,8)
data_region = data_region %>% filter(region %in% subsample_regions)
source('C:/code/silo_output_analyzer/spatial_reader.R')
read_spatial(output_path, subpath, scenario_name)
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
read_spatial(output_path, subpath, scenario_name)
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
View(zonesWithRegionName)
output_path = "c:/projects/SILO/relocation/scenarios/"
scenario_name = "4e"
subpath =  scenario_name
source("results_reader.R")
source("analyze_sp.R")
source("spatial_reader.R")
read_results(output_path, subpath, scenario_name)
analyze_sp(output_path, subpath, scenario_name)
read_spatial(output_path, subpath, scenario_name)
output_path = "c:/projects/SILO/relocation/scenarios/"
scenario_name = "4.5"
subpath =  scenario_name
source("c:/code/matsimScaling/siloAnalysis/readZonesAndRegions.R")
source("results_reader.R")
source("analyze_sp.R")
source("spatial_reader.R")
read_results(output_path, subpath, scenario_name)
analyze_sp(output_path, subpath, scenario_name)
read_spatial(output_path, subpath, scenario_name)
output_path = "c:/projects/SILO/relocation/scenarios/"
scenario_name = "4e"
subpath =  scenario_name
source("c:/code/matsimScaling/siloAnalysis/readZonesAndRegions.R")
source("results_reader.R")
source("analyze_sp.R")
source("spatial_reader.R")
read_results(output_path, subpath, scenario_name)
analyze_sp(output_path, subpath, scenario_name)
read_spatial(output_path, subpath, scenario_name)
View(zonesWithRegion)
View(zonesWithRegionName)
View(zonesWithRegionName)
source('C:/code/silo_output_analyzer/spatial_reader.R')
source('C:/code/silo_output_analyzer/main.R')
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
levels_regions = levels(zonesWithRegionName$work_region_name)
sub(patter = "ü", replacement = "ue", x = levels_regions)
levels_regions = sub(pattern = "ü", replacement = "ue", x = levels_regions)
levels_regions = sub(pattern = "ü", replacement = "ue", x = levels_regions)
levels_regions = sub(pattern = "ö", replacement = "oe", x = levels_regions)
levels_regions = levels(zonesWithRegionName$work_region_name)
levels_regions2 = sub(pattern = "ü", replacement = "ue", x = levels_regions)
levels_regions2 = sub(pattern = "ä", replacement = "ae", x = levels_regions2)
levels_regions2 = sub(pattern = "ö", replacement = "oe", x = levels_regions2)
zonesWithRegionName$work_region_name = factor(zonesWithRegionName$work_region_name,
levels = levels_regions,
lables = levels_regions2)
zonesWithRegionName$work_region_name = factor(zonesWithRegionName$work_region_name,
levels = levels_regions,
labels = levels_regions2)
View(zonesWithRegionName)
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
source('C:/code/silo_output_analyzer/main.R')
source('C:/code/silo_output_analyzer/main.R')
source('C:/code/silo_output_analyzer/main.R')
path = "c:/models/silo/mucSmall/scenOutput"
file_name = "resultFileSpatial1.csv"
raw = read.csv(paste(path,subpath,file_name,sep = "/"),
fill = T,
skip = 1,as.is = 1:21)
raw = raw %>% filter(autoAccessibility != "", autoAccessibility != "autoAccessibility")
zones  = unique(as.numeric(raw$Year2011))
years = 2011:2050
firstColumns = data.frame()
for(year in years){
thisYear = data.frame(zone = zones, year = year)
firstColumns = rbind(firstColumns, thisYear)
}
raw = cbind(firstColumns, raw)
raw = raw %>% mutate (validation = if_else(zone == as.numeric(Year2011), T, F))
summary(raw$validation)
data = raw %>% select(year, zone, autoAccessibility,
transitAccessibility ,
population,
households,
jobs) %>%
mutate(autoAccessibility = as.numeric(autoAccessibility)) %>%
mutate(transitAccessibility = as.numeric(transitAccessibility)) %>%
mutate(population = as.numeric(population)) %>%
mutate(households = as.numeric(households)) %>%
mutate(jobs = as.numeric(jobs))
levels_regions = levels(zonesWithRegionName$work_region_name)
levels_regions2 = sub(pattern = "ü", replacement = "ue", x = levels_regions)
levels_regions2 = sub(pattern = "ä", replacement = "ae", x = levels_regions2)
levels_regions2 = sub(pattern = "ö", replacement = "oe", x = levels_regions2)
data = merge(x= data, y = zonesWithRegionName, by = "zone")
data_region = data %>% group_by(year, region = work_region_name) %>% summarize(autoAccessibility = mean(autoAccessibility),
transitAccessibility = mean(transitAccessibility),
population = sum(population),
households = sum(households),
jobs = sum(jobs))
zonesWithRegionName$work_region_name = factor(zonesWithRegionName$work_region_name,
levels = levels_regions,
labels = levels_regions2)
subsample_regions = c("Dachau", "Muenchen-Landeshauptstadt", "Augsburg", "Eichstaett")
data_region = data_region %>% filter(region %in% subsample_regions)
plot5 = ggplot(data_region, aes(x=as.integer(year),
y = population,
color = region,
group = region)) +
ylab("Population") +
geom_line(size = 1) +
theme_light() +
theme(legend.position = "bottom") +
labs(color = "Region") +
xlab("Year")
print(plot5)
View(data_region)
View(zonesWithRegionName)
View(zonesWithRegionName)
zonesWithRegionName$work_region_name = factor(zonesWithRegionName$work_region_name,
levels = levels_regions2,
labels = levels_regions2)
subsample_regions = c("Dachau", "Muenchen-Landeshauptstadt", "Augsburg", "Eichstaett")
data_region = data_region %>% filter(region %in% subsample_regions)
plot5 = ggplot(data_region, aes(x=as.integer(year),
y = population,
color = region,
group = region)) +
ylab("Population") +
geom_line(size = 1) +
theme_light() +
theme(legend.position = "bottom") +
labs(color = "Region") +
xlab("Year")
print(plot5)
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
path = "c:/models/silo/mucSmall/scenOutput"
file_name = "resultFileSpatial1.csv"
raw = read.csv(paste(path,subpath,file_name,sep = "/"),
fill = T,
skip = 1,as.is = 1:21)
raw = raw %>% filter(autoAccessibility != "", autoAccessibility != "autoAccessibility")
zones  = unique(as.numeric(raw$Year2011))
years = 2011:2050
firstColumns = data.frame()
for(year in years){
thisYear = data.frame(zone = zones, year = year)
firstColumns = rbind(firstColumns, thisYear)
}
raw = cbind(firstColumns, raw)
raw = raw %>% mutate (validation = if_else(zone == as.numeric(Year2011), T, F))
summary(raw$validation)
data = raw %>% select(year, zone, autoAccessibility,
transitAccessibility ,
population,
households,
jobs) %>%
mutate(autoAccessibility = as.numeric(autoAccessibility)) %>%
mutate(transitAccessibility = as.numeric(transitAccessibility)) %>%
mutate(population = as.numeric(population)) %>%
mutate(households = as.numeric(households)) %>%
mutate(jobs = as.numeric(jobs))
View(zonesWithRegionName)
source('C:/code/silo_output_analyzer/main.R')
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
path = "c:/models/silo/mucSmall/scenOutput"
file_name = "resultFileSpatial1.csv"
raw = read.csv(paste(path,subpath,file_name,sep = "/"),
fill = T,
skip = 1,as.is = 1:21)
raw = raw %>% filter(autoAccessibility != "", autoAccessibility != "autoAccessibility")
zones  = unique(as.numeric(raw$Year2011))
years = 2011:2050
firstColumns = data.frame()
for(year in years){
thisYear = data.frame(zone = zones, year = year)
firstColumns = rbind(firstColumns, thisYear)
}
raw = cbind(firstColumns, raw)
raw = raw %>% mutate (validation = if_else(zone == as.numeric(Year2011), T, F))
summary(raw$validation)
data = raw %>% select(year, zone, autoAccessibility,
transitAccessibility ,
population,
households,
jobs) %>%
mutate(autoAccessibility = as.numeric(autoAccessibility)) %>%
mutate(transitAccessibility = as.numeric(transitAccessibility)) %>%
mutate(population = as.numeric(population)) %>%
mutate(households = as.numeric(households)) %>%
mutate(jobs = as.numeric(jobs))
data = merge(x= data, y = zonesWithRegionName, by = "zone")
data_region = data %>% group_by(year, region = work_region_name) %>% summarize(autoAccessibility = mean(autoAccessibility),
transitAccessibility = mean(transitAccessibility),
population = sum(population),
households = sum(households),
jobs = sum(jobs))
subsample_regions = c("Dachau", "München-Landeshauptstadt", "Augsburg", "Eichstätt", "Ingoldstadt")
data_region = data_region %>% filter(region %in% subsample_regions)
subsample_regions = c("Dachau", "München-Landeshauptstadt", "Augsburg", "Eichstätt", "Ingolstadt")
data_region = data_region %>% filter(region %in% subsample_regions)
View(data_region)
View(data)
subsample_regions = c("Dachau", "München-Landeshauptstadt","Augsburg", "Eichstätt", "Ingolstadt")
data_region = data_region %>% filter(region %in% subsample_regions)
plot5 = ggplot(data_region, aes(x=as.integer(year),
y = population,
color = region,
group = region)) +
ylab("Population") +
geom_line(size = 1) +
theme_light() +
theme(legend.position = "bottom") +
labs(color = "Region") +
xlab("Year")
print(plot5)
View(zonesWithRegionName)
data_region = data %>% group_by(year, region = work_region_name) %>% summarize(autoAccessibility = mean(autoAccessibility),
transitAccessibility = mean(transitAccessibility),
population = sum(population),
households = sum(households),
jobs = sum(jobs))
subsample_regions = c("Dachau","München-Landeshauptstadt","Augsburg","Eichstätt","Ingolstadt")
data_region = data_region %>% filter(region %in% subsample_regions)
plot5 = ggplot(data_region, aes(x=as.integer(year),
y = population,
color = region,
group = region)) +
ylab("Population") +
geom_line(size = 1) +
theme_light() +
theme(legend.position = "bottom") +
labs(color = "Region") +
xlab("Year")
print(plot5)
data = merge(x= data, y = zonesWithRegionName, by = "zone")
data_region = data %>% group_by(year, region = work_region_name) %>% summarize(autoAccessibility = mean(autoAccessibility),
transitAccessibility = mean(transitAccessibility),
population = sum(population),
households = sum(households),
jobs = sum(jobs))
subsample_regions = c("Dachau","München-Landeshauptstadt","Augsburg","Eichstätt")
data_region = data_region %>% filter(region %in% subsample_regions)
data_region = data %>% group_by(year, region = work_region_name) %>% summarize(autoAccessibility = mean(autoAccessibility),
transitAccessibility = mean(transitAccessibility),
population = sum(population),
households = sum(households),
jobs = sum(jobs))
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
data_region = data %>% group_by(year, region = work_region_name) %>% summarize(autoAccessibility = mean(autoAccessibility),
transitAccessibility = mean(transitAccessibility),
population = sum(population),
households = sum(households),
jobs = sum(jobs))
data = merge(x= data, y = zonesWithRegionName, by = "zone")
data_region = data %>% group_by(year, region = work_region_name) %>% summarize(autoAccessibility = mean(autoAccessibility),
transitAccessibility = mean(transitAccessibility),
population = sum(population),
households = sum(households),
jobs = sum(jobs))
data_region = data_region %>% filter(region %in% c("Dachau","München-Landeshauptstadt","Augsburg","Eichstätt"))
plot5 = ggplot(data_region, aes(x=as.integer(year),
y = population,
color = region,
group = region)) +
ylab("Population") +
geom_line(size = 1) +
theme_light() +
theme(legend.position = "bottom") +
labs(color = "Region") +
xlab("Year")
print(plot5)
View(data_region)
debugSource('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
output_path = "c:/projects/SILO/relocation/scenarios/regional/"
read_spatial(output_path, subpath, scenario_name)
output_path = "c:/projects/SILO/relocation/scenarios/regional/"
read_spatial(output_path, subpath, scenario_name)
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
read_results(output_path, subpath, scenario_name)
analyze_sp(output_path, subpath, scenario_name)
output_path = "c:/projects/SILO/relocation/scenarios/regional/"
read_spatial(output_path, subpath, scenario_name)
source("c:/code/matsimScaling/siloAnalysis/readZonesAndRegions.R")
source("results_reader.R")
source("analyze_sp.R")
source("spatial_reader.R")
output_path = "c:/projects/SILO/relocation/scenarios/"
read_results(output_path, subpath, scenario_name)
output_path = "c:/projects/SILO/relocation/scenarios/regional/"
read_spatial(output_path, subpath, scenario_name)
analyze_sp(output_path, subpath, scenario_name)
output_path = "c:/projects/SILO/relocation/scenarios/"
read_results(output_path, subpath, scenario_name)
analyze_sp(output_path, subpath, scenario_name)
output_path = "c:/projects/SILO/relocation/scenarios/regional/"
read_spatial(output_path, subpath, scenario_name)
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
View(read_spatial)
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
output_path = "c:/projects/SILO/relocation/scenarios/regional/"
read_spatial(output_path, subpath, scenario_name)
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
source('C:/code/silo_output_analyzer/spatial_reader.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/main.R')
output_path = "c:/projects/SILO/relocation/scenarios/regional/"
read_spatial(output_path, subpath, scenario_name)
scenario_name = "4.5"
subpath =  scenario_name
source("spatial_reader.R")
output_path = "c:/projects/SILO/relocation/scenarios/regional/"
read_spatial(output_path, subpath, scenario_name)
source("c:/code/matsimScaling/siloAnalysis/readZonesAndRegions.R")
read_spatial(output_path, subpath, scenario_name)
source('C:/code/silo_output_analyzer/spatial_reader.R')
source('C:/code/silo_output_analyzer/main.R', encoding = 'UTF-8')
scenario_name = "4e"
subpath =  scenario_name
source("c:/code/matsimScaling/siloAnalysis/readZonesAndRegions.R")
source("results_reader.R")
source("analyze_sp.R")
source("spatial_reader.R")
output_path = "c:/projects/SILO/relocation/scenarios/"
read_results(output_path, subpath, scenario_name)
analyze_sp(output_path, subpath, scenario_name)
output_path = "c:/projects/SILO/relocation/scenarios/regional/"
regions = c("München-Landeshauptstadt","Augsburg","Eichstätt","Dachau")
read_spatial(output_path, subpath, scenario_name, regions)
scenario_name = "5e"
source('C:/code/silo_output_analyzer/main.R', encoding = 'UTF-8')
source('C:/code/silo_output_analyzer/spatial_reader.R')
source('C:/code/silo_output_analyzer/analyze_sp.R')
source('C:/code/silo_output_analyzer/results_reader.R')
scenario_name = "5e_full"
subpath =  "5e"
source("c:/code/matsimScaling/siloAnalysis/readZonesAndRegions.R")
source("results_reader.R")
source("analyze_sp.R")
source("spatial_reader.R")
output_path = "c:/projects/SILO/relocation/scenarios/"
read_results(output_path, subpath, scenario_name)
analyze_sp(output_path, subpath, scenario_name)
output_path = "c:/projects/SILO/relocation/scenarios/regional/"
regions = c("München-Landeshauptstadt","Augsburg","Eichstätt","Dachau")
read_spatial(output_path, subpath, scenario_name, regions)
path = "c:/models/silo/muc/scenOutput"
file_name = "resultFile1.csv"
min_y = 0
max_y = 50
raw = readLines(paste(path,subpath,file_name,sep = "/"))
this_variable = "aveCommuteDistByRegion"
this_variable_stops = "carOwnershipLevel"
data = data.frame()
i = 1
while (i <= length(raw)){
if (length(grep(pattern = "Year", x = raw[i]))==1){
#found a new year
year = as.numeric(sub(pattern = "Year ",replace = "",x = raw[i]))
print(year)
i = i+1
} else {
line_elements =strsplit(x = raw[i], split = ",")[[1]]
if(line_elements[1] == this_variable){
i = i+1
line_elements =strsplit(x = raw[i], split = ",")[[1]]
while (line_elements[1] != this_variable_stops){
row = list(year = year, region = as.numeric(line_elements[1]), time =as.numeric(line_elements[2]))
data = rbind(data, row)
i = i+1
line_elements =strsplit(x = raw[i], split = ",")[[1]]
}
}
i = i+1
}
}
View(data)
max_y = 500
ggplot(data, aes(x=year, y =time, color = as.factor(region))) +
geom_line() + geom_point() + theme_light() +
xlab("Year") + ylab("Average comuting time by region (minutes)") +
ylim(min_y, max_y)
data_mean = data %>% group_by(year) %>% summarize(time = mean(time, na.rm = T))
plot3 = ggplot(data_mean, aes(x=year, y =time)) +
geom_line() + geom_point() + theme_light() +
xlab("Year") + ylab("Average comuting time by region (minutes)") +
ylim(min_y, max_y)
print(plot3)
ggsave(file = paste(output_path,"time_all_",scenario_name,".png", sep = ""),
plot =  plot3, height = 15, width = 10, units = "cm" )
